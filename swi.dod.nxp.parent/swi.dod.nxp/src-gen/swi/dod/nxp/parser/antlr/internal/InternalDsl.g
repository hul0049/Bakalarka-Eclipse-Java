/*
 * generated by Xtext 2.10.0
 */
grammar InternalDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package swi.dod.nxp.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package swi.dod.nxp.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import swi.dod.nxp.services.DslGrammarAccess;

}

@parser::members {

 	private DslGrammarAccess grammarAccess;

    public InternalDslParser(TokenStream input, DslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected DslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getCommandsCommandParserRuleCall_0());
			}
			lv_commands_0_0=ruleCommand
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"commands",
					lv_commands_0_0,
					"swi.dod.nxp.Dsl.Command");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleCommand
entryRuleCommand returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCommandRule()); }
	iv_ruleCommand=ruleCommand
	{ $current=$iv_ruleCommand.current.getText(); }
	EOF;

// Rule Command
ruleCommand returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getCommandAccess().getEngineParserRuleCall_0_0());
			}
			this_Engine_0=ruleEngine
			{
				$current.merge(this_Engine_0);
			}
			{
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getCommandAccess().getNavigateParserRuleCall_0_1());
			}
			this_Navigate_1=ruleNavigate
			{
				$current.merge(this_Navigate_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getCommandAccess().getRunParserRuleCall_0_2());
			}
			this_Run_2=ruleRun
			{
				$current.merge(this_Run_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCommandAccess().getFullStopKeyword_1());
		}
	)
;

// Entry rule entryRuleEngine
entryRuleEngine returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEngineRule()); }
	iv_ruleEngine=ruleEngine
	{ $current=$iv_ruleEngine.current.getText(); }
	EOF;

// Rule Engine
ruleEngine returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='Engine'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEngineAccess().getEngineKeyword_0());
		}
		(
			this_DIRECTION_LR_1=RULE_DIRECTION_LR
			{
				$current.merge(this_DIRECTION_LR_1);
			}
			{
				newLeafNode(this_DIRECTION_LR_1, grammarAccess.getEngineAccess().getDIRECTION_LRTerminalRuleCall_1());
			}
		)?
		this_DIRECTION_2=RULE_DIRECTION
		{
			$current.merge(this_DIRECTION_2);
		}
		{
			newLeafNode(this_DIRECTION_2, grammarAccess.getEngineAccess().getDIRECTIONTerminalRuleCall_2());
		}
		{
			newCompositeNode(grammarAccess.getEngineAccess().getPercentageParserRuleCall_3());
		}
		this_Percentage_3=rulePercentage
		{
			$current.merge(this_Percentage_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleNavigate
entryRuleNavigate returns [String current=null]:
	{ newCompositeNode(grammarAccess.getNavigateRule()); }
	iv_ruleNavigate=ruleNavigate
	{ $current=$iv_ruleNavigate.current.getText(); }
	EOF;

// Rule Navigate
ruleNavigate returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='Navigate'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getNavigateAccess().getNavigateKeyword_0());
		}
		this_DIRECTION_LR_1=RULE_DIRECTION_LR
		{
			$current.merge(this_DIRECTION_LR_1);
		}
		{
			newLeafNode(this_DIRECTION_LR_1, grammarAccess.getNavigateAccess().getDIRECTION_LRTerminalRuleCall_1());
		}
		{
			newCompositeNode(grammarAccess.getNavigateAccess().getAngleParserRuleCall_2());
		}
		this_Angle_2=ruleAngle
		{
			$current.merge(this_Angle_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleRun
entryRuleRun returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRunRule()); }
	iv_ruleRun=ruleRun
	{ $current=$iv_ruleRun.current.getText(); }
	EOF;

// Rule Run
ruleRun returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='Run'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRunAccess().getRunKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getRunAccess().getTimeParserRuleCall_1());
		}
		this_Time_1=ruleTime
		{
			$current.merge(this_Time_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulePercentage
entryRulePercentage returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPercentageRule()); }
	iv_rulePercentage=rulePercentage
	{ $current=$iv_rulePercentage.current.getText(); }
	EOF;

// Rule Percentage
rulePercentage returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPercentageAccess().getFloatParserRuleCall_0());
		}
		this_Float_0=ruleFloat
		{
			$current.merge(this_Float_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw='%'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPercentageAccess().getPercentSignKeyword_1());
		}
	)
;

// Entry rule entryRuleAngle
entryRuleAngle returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAngleRule()); }
	iv_ruleAngle=ruleAngle
	{ $current=$iv_ruleAngle.current.getText(); }
	EOF;

// Rule Angle
ruleAngle returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getAngleAccess().getFloatParserRuleCall());
	}
	this_Float_0=ruleFloat
	{
		$current.merge(this_Float_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleTime
entryRuleTime returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTimeRule()); }
	iv_ruleTime=ruleTime
	{ $current=$iv_ruleTime.current.getText(); }
	EOF;

// Rule Time
ruleTime returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTimeAccess().getFloatParserRuleCall_0());
		}
		this_Float_0=ruleFloat
		{
			$current.merge(this_Float_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		this_UNITS_1=RULE_UNITS
		{
			$current.merge(this_UNITS_1);
		}
		{
			newLeafNode(this_UNITS_1, grammarAccess.getTimeAccess().getUNITSTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleFloat
entryRuleFloat returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFloatRule()); }
	iv_ruleFloat=ruleFloat
	{ $current=$iv_ruleFloat.current.getText(); }
	EOF;

// Rule Float
ruleFloat returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			this_NONZERO_DIGIT_0=RULE_NONZERO_DIGIT
			{
				$current.merge(this_NONZERO_DIGIT_0);
			}
			{
				newLeafNode(this_NONZERO_DIGIT_0, grammarAccess.getFloatAccess().getNONZERO_DIGITTerminalRuleCall_0_0());
			}
			    |
			this_ZERO_1=RULE_ZERO
			{
				$current.merge(this_ZERO_1);
			}
			{
				newLeafNode(this_ZERO_1, grammarAccess.getFloatAccess().getZEROTerminalRuleCall_0_1());
			}
		)+
		(
			kw=','
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getFloatAccess().getCommaKeyword_1_0());
			}
			(
				this_NONZERO_DIGIT_3=RULE_NONZERO_DIGIT
				{
					$current.merge(this_NONZERO_DIGIT_3);
				}
				{
					newLeafNode(this_NONZERO_DIGIT_3, grammarAccess.getFloatAccess().getNONZERO_DIGITTerminalRuleCall_1_1_0());
				}
				    |
				this_ZERO_4=RULE_ZERO
				{
					$current.merge(this_ZERO_4);
				}
				{
					newLeafNode(this_ZERO_4, grammarAccess.getFloatAccess().getZEROTerminalRuleCall_1_1_1());
				}
			)+
		)?
	)
;

RULE_ZERO : '0';

RULE_NONZERO_DIGIT : '1'..'9';

RULE_DIRECTION_LR : ('left'|'right');

RULE_DIRECTION : ('forward'|'backward');

RULE_UNITS : ('s'|'ms');

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;
