/*
 * generated by Xtext 2.10.0
 */
package swi.dod.nxp.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "swi.dod.nxp.Dsl.Model");
		private final Assignment cCommandsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cCommandsCommandParserRuleCall_0 = (RuleCall)cCommandsAssignment.eContents().get(0);
		
		//Model:
		//	commands+=Command*;
		@Override public ParserRule getRule() { return rule; }
		
		//commands+=Command*
		public Assignment getCommandsAssignment() { return cCommandsAssignment; }
		
		//Command
		public RuleCall getCommandsCommandParserRuleCall_0() { return cCommandsCommandParserRuleCall_0; }
	}
	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "swi.dod.nxp.Dsl.Command");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cEngineParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cNavigateParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cRunParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Command:
		//	(Engine
		//	| Navigate
		//	| Run) ".";
		@Override public ParserRule getRule() { return rule; }
		
		//(Engine | Navigate | Run) "."
		public Group getGroup() { return cGroup; }
		
		//(Engine | Navigate | Run)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//Engine
		public RuleCall getEngineParserRuleCall_0_0() { return cEngineParserRuleCall_0_0; }
		
		//Navigate
		public RuleCall getNavigateParserRuleCall_0_1() { return cNavigateParserRuleCall_0_1; }
		
		//Run
		public RuleCall getRunParserRuleCall_0_2() { return cRunParserRuleCall_0_2; }
		
		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
	}
	public class EngineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "swi.dod.nxp.Dsl.Engine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEngineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cDIRECTION_LRTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cDIRECTIONTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cPercentageParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//Engine:
		//	"Engine" DIRECTION_LR? DIRECTION Percentage;
		@Override public ParserRule getRule() { return rule; }
		
		//"Engine" DIRECTION_LR? DIRECTION Percentage
		public Group getGroup() { return cGroup; }
		
		//"Engine"
		public Keyword getEngineKeyword_0() { return cEngineKeyword_0; }
		
		//DIRECTION_LR?
		public RuleCall getDIRECTION_LRTerminalRuleCall_1() { return cDIRECTION_LRTerminalRuleCall_1; }
		
		//DIRECTION
		public RuleCall getDIRECTIONTerminalRuleCall_2() { return cDIRECTIONTerminalRuleCall_2; }
		
		//Percentage
		public RuleCall getPercentageParserRuleCall_3() { return cPercentageParserRuleCall_3; }
	}
	public class NavigateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "swi.dod.nxp.Dsl.Navigate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNavigateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cDIRECTION_LRTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cAngleParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Navigate:
		//	"Navigate" DIRECTION_LR Angle;
		@Override public ParserRule getRule() { return rule; }
		
		//"Navigate" DIRECTION_LR Angle
		public Group getGroup() { return cGroup; }
		
		//"Navigate"
		public Keyword getNavigateKeyword_0() { return cNavigateKeyword_0; }
		
		//DIRECTION_LR
		public RuleCall getDIRECTION_LRTerminalRuleCall_1() { return cDIRECTION_LRTerminalRuleCall_1; }
		
		//Angle
		public RuleCall getAngleParserRuleCall_2() { return cAngleParserRuleCall_2; }
	}
	public class RunElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "swi.dod.nxp.Dsl.Run");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRunKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cTimeParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Run:
		//	"Run" Time;
		@Override public ParserRule getRule() { return rule; }
		
		//"Run" Time
		public Group getGroup() { return cGroup; }
		
		//"Run"
		public Keyword getRunKeyword_0() { return cRunKeyword_0; }
		
		//Time
		public RuleCall getTimeParserRuleCall_1() { return cTimeParserRuleCall_1; }
	}
	public class PercentageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "swi.dod.nxp.Dsl.Percentage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFloatParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cPercentSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Percentage:
		//	Float "%";
		@Override public ParserRule getRule() { return rule; }
		
		//Float "%"
		public Group getGroup() { return cGroup; }
		
		//Float
		public RuleCall getFloatParserRuleCall_0() { return cFloatParserRuleCall_0; }
		
		//"%"
		public Keyword getPercentSignKeyword_1() { return cPercentSignKeyword_1; }
	}
	public class AngleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "swi.dod.nxp.Dsl.Angle");
		private final RuleCall cFloatParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Angle:
		//	Float;
		@Override public ParserRule getRule() { return rule; }
		
		//Float
		public RuleCall getFloatParserRuleCall() { return cFloatParserRuleCall; }
	}
	public class TimeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "swi.dod.nxp.Dsl.Time");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFloatParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cUNITSTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Time:
		//	Float UNITS;
		@Override public ParserRule getRule() { return rule; }
		
		//Float UNITS
		public Group getGroup() { return cGroup; }
		
		//Float
		public RuleCall getFloatParserRuleCall_0() { return cFloatParserRuleCall_0; }
		
		//UNITS
		public RuleCall getUNITSTerminalRuleCall_1() { return cUNITSTerminalRuleCall_1; }
	}
	public class FloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "swi.dod.nxp.Dsl.Float");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cNONZERO_DIGITTerminalRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cZEROTerminalRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final RuleCall cNONZERO_DIGITTerminalRuleCall_1_1_0 = (RuleCall)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cZEROTerminalRuleCall_1_1_1 = (RuleCall)cAlternatives_1_1.eContents().get(1);
		
		//Float:
		//	(NONZERO_DIGIT | ZERO)+ ("," (NONZERO_DIGIT | ZERO)+)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(NONZERO_DIGIT | ZERO)+ ("," (NONZERO_DIGIT | ZERO)+)?
		public Group getGroup() { return cGroup; }
		
		//(NONZERO_DIGIT | ZERO)+
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//NONZERO_DIGIT
		public RuleCall getNONZERO_DIGITTerminalRuleCall_0_0() { return cNONZERO_DIGITTerminalRuleCall_0_0; }
		
		//ZERO
		public RuleCall getZEROTerminalRuleCall_0_1() { return cZEROTerminalRuleCall_0_1; }
		
		//("," (NONZERO_DIGIT | ZERO)+)?
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//(NONZERO_DIGIT | ZERO)+
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//NONZERO_DIGIT
		public RuleCall getNONZERO_DIGITTerminalRuleCall_1_1_0() { return cNONZERO_DIGITTerminalRuleCall_1_1_0; }
		
		//ZERO
		public RuleCall getZEROTerminalRuleCall_1_1_1() { return cZEROTerminalRuleCall_1_1_1; }
	}
	
	
	private final ModelElements pModel;
	private final CommandElements pCommand;
	private final EngineElements pEngine;
	private final NavigateElements pNavigate;
	private final RunElements pRun;
	private final PercentageElements pPercentage;
	private final AngleElements pAngle;
	private final TimeElements pTime;
	private final FloatElements pFloat;
	private final TerminalRule tZERO;
	private final TerminalRule tNONZERO_DIGIT;
	private final TerminalRule tDIRECTION_LR;
	private final TerminalRule tDIRECTION;
	private final TerminalRule tUNITS;
	private final TerminalRule tWS;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	
	private final Grammar grammar;

	@Inject
	public DslGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pModel = new ModelElements();
		this.pCommand = new CommandElements();
		this.pEngine = new EngineElements();
		this.pNavigate = new NavigateElements();
		this.pRun = new RunElements();
		this.pPercentage = new PercentageElements();
		this.pAngle = new AngleElements();
		this.pTime = new TimeElements();
		this.pFloat = new FloatElements();
		this.tZERO = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "swi.dod.nxp.Dsl.ZERO");
		this.tNONZERO_DIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "swi.dod.nxp.Dsl.NONZERO_DIGIT");
		this.tDIRECTION_LR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "swi.dod.nxp.Dsl.DIRECTION_LR");
		this.tDIRECTION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "swi.dod.nxp.Dsl.DIRECTION");
		this.tUNITS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "swi.dod.nxp.Dsl.UNITS");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "swi.dod.nxp.Dsl.WS");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "swi.dod.nxp.Dsl.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "swi.dod.nxp.Dsl.SL_COMMENT");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("swi.dod.nxp.Dsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Model:
	//	commands+=Command*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Command:
	//	(Engine
	//	| Navigate
	//	| Run) ".";
	public CommandElements getCommandAccess() {
		return pCommand;
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}
	
	//Engine:
	//	"Engine" DIRECTION_LR? DIRECTION Percentage;
	public EngineElements getEngineAccess() {
		return pEngine;
	}
	
	public ParserRule getEngineRule() {
		return getEngineAccess().getRule();
	}
	
	//Navigate:
	//	"Navigate" DIRECTION_LR Angle;
	public NavigateElements getNavigateAccess() {
		return pNavigate;
	}
	
	public ParserRule getNavigateRule() {
		return getNavigateAccess().getRule();
	}
	
	//Run:
	//	"Run" Time;
	public RunElements getRunAccess() {
		return pRun;
	}
	
	public ParserRule getRunRule() {
		return getRunAccess().getRule();
	}
	
	//Percentage:
	//	Float "%";
	public PercentageElements getPercentageAccess() {
		return pPercentage;
	}
	
	public ParserRule getPercentageRule() {
		return getPercentageAccess().getRule();
	}
	
	//Angle:
	//	Float;
	public AngleElements getAngleAccess() {
		return pAngle;
	}
	
	public ParserRule getAngleRule() {
		return getAngleAccess().getRule();
	}
	
	//Time:
	//	Float UNITS;
	public TimeElements getTimeAccess() {
		return pTime;
	}
	
	public ParserRule getTimeRule() {
		return getTimeAccess().getRule();
	}
	
	//Float:
	//	(NONZERO_DIGIT | ZERO)+ ("," (NONZERO_DIGIT | ZERO)+)?;
	public FloatElements getFloatAccess() {
		return pFloat;
	}
	
	public ParserRule getFloatRule() {
		return getFloatAccess().getRule();
	}
	
	//terminal ZERO:
	//	"0";
	public TerminalRule getZERORule() {
		return tZERO;
	}
	
	//terminal NONZERO_DIGIT:
	//	"1".."9";
	public TerminalRule getNONZERO_DIGITRule() {
		return tNONZERO_DIGIT;
	}
	
	//terminal DIRECTION_LR:
	//	"left" | "right";
	public TerminalRule getDIRECTION_LRRule() {
		return tDIRECTION_LR;
	}
	
	//terminal DIRECTION:
	//	"forward" | "backward";
	public TerminalRule getDIRECTIONRule() {
		return tDIRECTION;
	}
	
	//terminal UNITS:
	//	"s" | "ms";
	public TerminalRule getUNITSRule() {
		return tUNITS;
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
}
